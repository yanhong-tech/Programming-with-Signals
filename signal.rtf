{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Bold;\f1\froman\fcharset0 Times-Roman;\f2\froman\fcharset0 Times-Italic;
\f3\fmodern\fcharset0 Courier;\f4\ftech\fcharset77 Symbol;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\ri0\sb100\sa100\partightenfactor0

\f0\b\fs28 \cf0 Overview\
\pard\pardeftab720\ri0\sb100\sa100\partightenfactor0

\f1\b0\fs24 \cf0 You are probably used to interacting with processes via typing input into them and reading responses. In this assignment, we'll have some fun with another way of interacting with processes: 
\f2\i signals
\f1\i0 . You'll write a simple program that responds to several signals in a variety of ways. \
\pard\pardeftab720\ri0\sb100\sa100\partightenfactor0

\f0\b\fs28 \cf0 Objectives\
\pard\pardeftab720\ri0\sb100\sa100\partightenfactor0

\f1\b0\fs24 \cf0 Your objective is to write a 
\f3\fs20 C
\f1\fs24  program 
\f3\fs20 sig.c
\f1\fs24  that, when invoked, waits for input from the user and echoes it back line-by-line (this is the default behavior). This program should execute on a Linux machine, and should be compiled with 
\f3\fs20 gcc
\f1\fs24 . While echoing inputs, your program should also listen for several signals. Receipt of each signal should cause a different response from the program. \
First, your program should schedule a 
\f3\fs20 SIGALRM
\f1\fs24  (alarm) every ten seconds, and react to this signal by counting up seconds, by printing something like the following: \
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0\partightenfactor0

\f3\fs20 \cf0 tick 0...  \
tick 10...  \
tick 20...\
\
\pard\pardeftab720\ri0\partightenfactor0

\f1\fs24 \cf0 as a running count. This will serve as a "heartbeat" to let you know that your program has not crashed.\
\pard\pardeftab720\ri0\sb100\sa100\partightenfactor0
\cf0 Second, the following signals should evoke behaviors as indicated: \
\pard\tx720\pardeftab720\li720\fi-360\ri0\sb100\sa100\partightenfactor0
\ls1\ilvl0
\f3\fs20 \cf0 1.	SIGINT
\f1\fs24  should print a summary of all time spent by the program (system and user) and then continue running the program. \
\ls1\ilvl0
\f3\fs20 2.	SIGTERM
\f1\fs24  should print a summary of all time spent in the program, and additionally exit the program \
\ls1\ilvl0
\f3\fs20 3.	SIGTSTP
\f1\fs24  should print the last 10 lines of user input. \
\pard\pardeftab720\ri0\sb100\sa100\partightenfactor0

\f0\b\fs28 \cf0 Hints\
\pard\pardeftab720\ri0\sb100\sa100\partightenfactor0

\f1\b0\fs24 \cf0 Some documentation exists that may help you. For example;\
\pard\tx720\pardeftab720\li720\fi-360\ri0\sb100\sa100\partightenfactor0
\ls2\ilvl0
\f4\fs20 \cf0 \'a5	
\f3 man signal
\f1\fs24  - how to set up a signal handler. \
\ls2\ilvl0
\f4\fs20 \'a5	
\f3 man sigvec
\f1\fs24  - another way to set up a signal handler. \
\ls2\ilvl0
\f4\fs20 \'a5	
\f3 man sleep
\f1\fs24  - how to use SIGALRM to sleep for a given number of seconds. \
\pard\pardeftab720\ri0\sb100\sa100\partightenfactor0
\cf0 The whole program should be in a single c program 
\f3\fs20 sig.c
\f1\fs24 . Programs in other languages are unacceptable. The beginning of the file should describe how to compile the file, in comments. A typical compilation command might be: \
\pard\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\pardeftab720\ri0\partightenfactor0

\f3\fs20 \cf0 gcc -o sig sig.c\
\pard\pardeftab720\ri0\partightenfactor0

\f1\fs24 \cf0 \
Ideally you should implement the above using only one signal handler routine to catch all kinds of signals, but you may use as many handlers as you choose.\
\
}